
/**
 * Write a description of part1 here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;

public class part1 {
    
    public int findStopCodon(String dna,int startIndex, String stopCodon)
    {
        int currIndex = dna.indexOf(stopCodon,startIndex+3);
        while( currIndex != -1)
        {
            if( (currIndex-startIndex) %3 ==0)
            {
                return currIndex;
            }
            currIndex= dna.indexOf(stopCodon,currIndex+1);
        }
  
        // If there is no such stopCodon, this method returns the length of the dna strand.
        return dna.length();
    }
    public void testFindStopCodon()
    {
        String dna = "xxxxzzzyyyTAAxxxgggttTAAxx";
        int dex= findStopCodon(dna,0, "TAA");
        
        /// need to finish writing tests
    }
    
    public String findGene(String dna, int startIndex)
    {
        //Find the index of the first occurrence of the start codon “ATG”. If there is no “ATG”, return the empty string
        startIndex = dna.indexOf("ATG",startIndex);
        if(startIndex == -1) 
        {
         return "";   
        }
        /*Find the index of the first occurrence of the stop codon “TAA” after the first occurrence of 
         * “ATG” that is a multiple of three away from the “ATG”. Hint: call findStopCodon.*/
         int indexTAA= findStopCodon(dna, startIndex, "TAA");
         
         /* Find the index of the first occurrence of the stop codon “TAG” after the first occurrence of “ATG” that is a multiple of three away from the “ATG”.*/
         int indexTAG = findStopCodon(dna, startIndex, "TAG");
          /* Find the index of the first occurrence of the stop codon “TGA” after the first occurrence of “ATG” that is a multiple of three away from the “ATG”. */
         int indexTGA = findStopCodon(dna, startIndex, "TGA");
          /*Return the gene formed from the “ATG” and the closest stop codon that is a multiple of three away. 
           * find the minimum valid (non -1) stop codon
           */
          int minIndex=0;
          if(indexTAA== -1 ||( indexTGA != -1 && indexTGA < indexTAA))
          {
              minIndex=indexTGA;
          }
          else 
          {
              minIndex=indexTAA;
          }
          
          if(minIndex ==-1 ||(indexTAG != -1 && indexTAG<minIndex))
          {
             minIndex=indexTAG; 
          }
              /* If there is no valid stop codon and therefore no gene, return the empty string*/ 
        if(minIndex == -1) 
        {
            return "";
        }
           // if there is no stop codons
        if(minIndex == dna.length())
        {
            return "";  
        }
       return dna.substring(startIndex,minIndex+3);
           
    }
    
    
    
    /////////// NEED TO FINISH //////////
    public void  testFindGene()
    {
        //DNA with no “ATG”,
        String dna = "ATCCTACCCGTTTAGCGC";
        System.out.println(dna);
        System.out.println("test for DNA with no “ATG”");
        String gene = findGene(dna,0);
        System.out.println(gene);
        
        //DNA with “ATG” and one valid stop codon
        dna = "ATGCCTGATCCATAGA" ;
        System.out.println(dna);
        System.out.println("test for DNA with “ATG” and one valid stop codon");
        gene = findGene(dna,0);
        System.out.println(gene);
        
        //DNA with “ATG” and multiple valid stop codons
        dna = "ATGCCTGATCCATAGATCTTAG" ;
        System.out.println(dna);
        System.out.println("test for DNA with “ATG” and multiple valid stop codons");
        gene = findGene(dna,0);
        System.out.println(gene);
        
        //DNA with “ATG” and no valid stop codons
        dna = "ATGCTGATCCATAGATCTTG" ;
        System.out.println(dna);
        System.out.println("test for DNA with “ATG” and no valid stop codons");
        gene = findGene(dna,0);
        System.out.println(gene);
        
        //DNA with “ATG” not at place 0 and one valid stop codon
        dna = "AAAATGCTGATCCATAGATCTTGTTTAGG" ;
        System.out.println(dna);
        System.out.println("test for DNA with “ATG” not at place 0 and one valid stop codon");
        gene = findGene(dna,0);
        System.out.println(gene);
    }
    
    public void printAllGenes (String dna)
    {
        int startIndex = 0 ;
        while (true)
        {
            String currentGene = findGene(dna,startIndex);
            if(currentGene.isEmpty())
            {
                break;
            }
            System.out.println(currentGene);
            startIndex=dna.indexOf(currentGene,startIndex)+currentGene.length();
            
        }
     
    }

     public StorageResource getAllGenes (String dna)
    {
        int startIndex = 0 ;
        StorageResource allGenes = new StorageResource();
        
        while (true)
        {
            String currentGene = findGene(dna,startIndex);
            if(currentGene.isEmpty())
            {
                break;
            }
            //System.out.println(currentGene);
            allGenes.add(currentGene);
            startIndex=dna.indexOf(currentGene,startIndex)+currentGene.length();
            
        }
     return allGenes;
    }
    
    public void printGenes(StorageResource genes)
    {
        for( String s : genes.data())
        {
         System.out.println(s);   
        }
    }
    public void testGetAllGenes()
    {
         /*StorageResource testRes = new StorageResource();
       testRes.add("ATCCTACCCGTTTAGCGC");
        testRes.add("ATGCCTGATCCATAGA");
        testRes.add("ATGCCTGATCCATAGATCTTAG");
        testRes.add("ATGCTGATCCATAGATCTTG");
        testRes.add("AAAATGCTGATCCATAGATCTTGTTTAGG");*/
        System.out.println("test 1");
        StorageResource testRes =getAllGenes("ATCCTACCCGTTTGAGCGC");
        printGenes(testRes);
        
         System.out.println("test 2");
        testRes =getAllGenes("ATGCCTGATCCATAGA");
        printGenes(testRes);
        
         System.out.println("test 3");
       testRes =getAllGenes("ATGCCTGATCCATAATATGGATCTTAGTTAA");
        printGenes(testRes);
        
         System.out.println("test 4");
       testRes =getAllGenes("ATGCTGATCCATAGATCTTGGATGTTGGTTGGTTAG");
        printGenes(testRes);
        
         System.out.println("test 5");
     testRes =getAllGenes("AAAATGCTGATCCATAGATCTTGTTTAGG");
        printGenes(testRes);
        
    }
   

    public double cgRatio ( String dna)
    {
        int num=0;
        String temp= dna.toUpperCase();
        for( int i=0; i<dna.length(); i++)
        {
            if(temp.charAt(i)== 'C' || temp.charAt(i)== 'G')
            {
             num++;   
            }
        }
        return  (double) num/dna.length();
    }
     //// * part 3 * ////
     public void processGenes(StorageResource sr)
     {
         
         int num_strings_bigger = 0;
         int num_ratio_bigger =0;
         int max_length =0;
         for(String s : sr.data())
         {
             //print all the Strings in sr that are longer than 9 characters
              
             if(s.length() > 9)
             {
                 System.out.println("this string is longer than 9 characters : " + s);
                 num_strings_bigger ++;
             }
            // print the Strings in sr whose C-G-ratio is higher than 0.35
            if(cgRatio(s) >0.35)
            {
                System.out.println("this String C-G_ratio is higher than 0.35 : " + s);
                num_ratio_bigger ++;
            }
            StorageResource all_genes = getAllGenes(s);
            for(String str : all_genes.data())
            {
                if(str.length() > max_length)
                {
                    max_length = str.length();
                }
            }
          
         }     
          // print the number of Strings in sr that are longer than 9 characters
             System.out.println(" this is the number of Strings in sr that are longer than 9 characters : " +num_strings_bigger);
             //print the number of strings in sr whose C-G-ratio is higher than 0.35
             System.out.println("this is the number of strings in sr whose C-G-ratio is higher than 0.35: " +num_ratio_bigger);
             
             //print the length of the longest gene in sr
             System.out.println("this is the length of the longest gene in sr is : " + max_length);
     }
     public void testProcessGenes()
     {
         StorageResource sr = new StorageResource();
         // case 1 - These should include: one DNA string that has some genes longer than 9 characters
         sr.add("AAATGCTCGGATTCTAAG");
         
         // case 2 - one DNA string that has no genes longer than 9 characters
         sr.add("AAAATGTGAATGTAGG");
         // case 3 - one DNA string that has some genes whose C-G-ratio is higher than 0.35
         sr.add("ATGGCGTGA");
         //case 4 - and one DNA string that has some genes whose C-G-ratio is lower than 0.35
         sr.add("ATGTATTAA");
         //case 5 - 
         
         processGenes(sr);
     }
    }


 
