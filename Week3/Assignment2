
/**
 * Write a description of secondAssignment here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class secondAssignment 
{
    public CSVRecord coldestHourInFile(CSVParser parser)
    {
        CSVRecord coldestSoFar = null;
        for(CSVRecord currentRow : parser)
        {
            coldestSoFar=theSmaller(coldestSoFar, currentRow);
        }
 
        return coldestSoFar;
    }


    public CSVRecord theSmaller(CSVRecord coldestSoFar, CSVRecord currentRow)
    {
        if(coldestSoFar == null && Double.parseDouble(currentRow.get("TemperatureF")) != -9999)
        {
            return currentRow;
        }
        double currentNum= Double.parseDouble(currentRow.get("TemperatureF"));
        double colderNum= Double.parseDouble(coldestSoFar.get("TemperatureF"));
        
        if(currentNum < colderNum && currentNum != -9999)
        {
            return currentRow;
        }
        return coldestSoFar; 
    }
    
    public void testColdestHourInFile()
    {
        FileResource fr = new FileResource();
        CSVRecord  coldest = coldestHourInFile(fr.getCSVParser());
        System.out.println("coldet temperature was " +coldest.get("TemperatureF") + "at " + coldest.get("DateUTC"));
    }
    
    /// course wanted function 
    public String fileNameWithColdestTemperature()
    {
        DirectoryResource dr = new DirectoryResource();
        CSVRecord coldest = null;
        String coldestFileName = "";
        for( File f : dr.selectedFiles())
        {
            FileResource fr = new FileResource(f);
            CSVRecord currentFile = coldestHourInFile(fr.getCSVParser());
            coldest = theSmaller( coldest, currentFile);
            if( coldest == currentFile)
            {
                coldestFileName = f.getName();
            }
        }
        return coldestFileName;
    }
    
    // courses needed fucntion 
       public File fileWithColdestTemperature()
    {
        DirectoryResource dr = new DirectoryResource();
        CSVRecord coldest = null;
        File coldestFile = null;
        for( File f : dr.selectedFiles())
        {
            FileResource fr = new FileResource(f);
            CSVRecord currentFile = coldestHourInFile(fr.getCSVParser());
            coldest = theSmaller( coldest, currentFile);
            if( coldest == currentFile)
            {
                coldestFile = f;
            }
        }
        return coldestFile;
    }
    public void testFileWithColdestTemperature() 
    {
        File f = fileWithColdestTemperature();
        System.out.println("Coldest day was in  file " + f.getName() );
        
        FileResource fr = new FileResource(f);
        CSVRecord  coldest = coldestHourInFile(fr.getCSVParser());
        System.out.println("Coldest temperature of that day  was " + coldest.get("TemperatureF"));
        System.out.println("All the Temperatures on the coldest day were: ");
        for( CSVRecord record :fr.getCSVParser())
        {
            System.out.println(record.get("DateUTC") + " " +record.get("TemperatureF"));
        }
        
    }
    
    public CSVRecord lowestHumidityInFile (CSVParser parser)
    {
         CSVRecord lowestHumidity = null;
        for(CSVRecord currentRow : parser)
        {
           lowestHumidity = theSmallerHumidity(lowestHumidity,currentRow);
        }
        return lowestHumidity;
    }
    
     public CSVRecord theSmallerHumidity(CSVRecord lowestSoFar, CSVRecord currentRow)
    {
        String currenthumiditystr = currentRow.get("Humidity");
        if(!currenthumiditystr.equals("N/A"))
        {
            double currentHumidity = Double.parseDouble(currenthumiditystr);
             if(lowestSoFar == null)
                {
                    return currentRow;
                }
                double lowestHumidity = Double.parseDouble(lowestSoFar.get("Humidity"));
                if(currentHumidity  < lowestHumidity)
                {
                 lowestSoFar= currentRow;   
                }
        }
        return lowestSoFar;
    }
    
    public void testLowestHumidityInFile()
    {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord csv = lowestHumidityInFile(parser);
        
        System.out.println("Lowest Humidity was "+ csv.get("Humidity") + " at " + csv.get("DateUTC"));
    }
    
    public CSVRecord lowestHumidityInManyFiles()
    {
        DirectoryResource dr = new DirectoryResource();
        CSVRecord coldest = null;
        for( File f : dr.selectedFiles())
        {
            FileResource fr = new FileResource(f);
            CSVRecord currentFile = lowestHumidityInFile(fr.getCSVParser());
            if(currentFile!=null){
            coldest = theSmallerHumidity( coldest, currentFile);
        }
        }
        return coldest;   
    }
   
    public void testLowestHumidityInManyFiles()
    {
        CSVRecord lowestHumidity =  lowestHumidityInManyFiles();
        System.out.println("Lowest Humidity was " +lowestHumidity.get("Humidity") + " at " + lowestHumidity.get("DateUTC"));
    }
    
    public double averageTemperatureInFile (CSVParser parser )
    {
        double num =0;
        double sumTemp=0;
        for(CSVRecord record : parser )
        {
            num++;
            sumTemp = sumTemp+ Double.parseDouble(record.get("TemperatureF"));
        }
        return (sumTemp/num);
    }
    
    public void testAverageTemperatureInFile() 
    {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double avrageHumidity = averageTemperatureInFile(parser);
        
        System.out.println("Average temperature in file is " + avrageHumidity);
        
    }
    
    public double averageTemperatureWithHighHumidityInFile(CSVParser parser , int value)
    {
        double num =0;
        double sumTemp=0;
        for(CSVRecord record : parser)
        {
            if(record.get("Humidity")!= "N/A" && Double.parseDouble(record.get("Humidity")) >= value)
            {
                num++;
                sumTemp = sumTemp +Double.parseDouble(record.get("TemperatureF"));
            }
        }
        if (num ==0) {return -1;}
        return (sumTemp/num);
    }
    
    public void testAverageTemperatureWithHighHumidityInFile()
    {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double avrageHumidity = averageTemperatureWithHighHumidityInFile(parser , 80);
        if(avrageHumidity == -1)
        {
            System.out.println("No temperatures with that humidity");
        }
        else
        {
            System.out.println("Average Temp when high Humidity is " + avrageHumidity);
        }
        
    }
}
